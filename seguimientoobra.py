# -*- coding: utf-8 -*-
"""seguimientoobra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBJwndIW6Ul9cuiy4MfLjFRloDPE9Z1i
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit pyngrok openpyxl xlsxwriter

!ngrok config add-authtoken 2zpnVgumhTMG7nYcsctVOD5vIRp_6uw9ePdeo2Yrbr32uGVtS

import pandas as pd
import plotly.express as px
import streamlit as st

# T√≠tulo
st.markdown("<h1 style='font-size: 36px;'>üìã Seguimiento de Obra PCM</h1>", unsafe_allow_html=True)
st.markdown("Sube los archivos locales de entradas, salidas y obras para visualizar los datos.")

# Subida de archivos
st.sidebar.markdown("### üì§ Carga tus archivos")
archivo_entradas = st.sidebar.file_uploader("Sube el archivo de ENTRADAS (.xlsx)", type=["xlsx"], key="entradas")
archivo_salidas = st.sidebar.file_uploader("Sube el archivo de SALIDAS (.xlsx)", type=["xlsx"], key="salidas")
archivo_obras = st.sidebar.file_uploader("Sube el archivo de OBRAS (.xlsx)", type=["xlsx"], key="obras")

# Validaci√≥n: si los 3 archivos est√°n cargados
if archivo_entradas and archivo_salidas and archivo_obras:

    # Cargar archivos
    entradas = pd.read_excel(archivo_entradas)
    salidas = pd.read_excel(archivo_salidas)
    obras = pd.read_excel(archivo_obras)

    # Normalizar nombres de columnas
    entradas.columns = entradas.columns.str.lower().str.strip()
    salidas.columns = salidas.columns.str.lower().str.strip()
    obras.columns = obras.columns.str.lower().str.strip()

    # Validar existencia de columna 'oth_numero' en todos los archivos
    columnas_requeridas = ['oth_numero']
    for df_nombre, df in zip(['Entradas', 'Salidas', 'Obras'], [entradas, salidas, obras]):
        for col in columnas_requeridas:
            if col not in df.columns:
                st.error(f"‚ùå La columna '{col}' no est√° en el archivo de {df_nombre}. Verifica los nombres de columna.")
                st.stop()

    # Hacer merge con obras
    entradas = entradas.merge(obras, on='oth_numero', how='left')
    salidas = salidas.merge(obras, on='oth_numero', how='left')

    # Selecci√≥n de vista
    tipo_vista = st.radio("Selecciona tipo de vista", ["Entradas", "Salidas"])
    datos = entradas if tipo_vista == "Entradas" else salidas

    # Filtro de O.T.
    ot_unicas = datos['oth_numero'].dropna().unique()
    ot_seleccionada = st.selectbox("Selecciona una Orden de Trabajo (O.T.)", ot_unicas)

    # Mostrar datos
    df_filtrado = datos[datos['oth_numero'] == ot_seleccionada]

    if df_filtrado.empty:
        st.warning("No se encontraron datos para la O.T. seleccionada.")
    else:
        nombre_obra = df_filtrado['oth_nombre'].iloc[0] if 'oth_nombre' in df_filtrado.columns else "Desconocida"
        st.subheader(f"üìå Datos para O.T. {ot_seleccionada} - {nombre_obra}")

        columnas_a_mostrar = ['fecha', 'material', 'articulo', 'cantidad', 'oth_numero']
        if 'oth_nombre' in df_filtrado.columns:
            columnas_a_mostrar.append('oth_nombre')

        st.dataframe(df_filtrado[columnas_a_mostrar])

        resumen = df_filtrado.groupby('articulo')['cantidad'].sum().reset_index()
        fig = px.bar(resumen, x='articulo', y='cantidad', title='Total por art√≠culo')
        st.plotly_chart(fig)

else:
    st.info("üìÇ Por favor, sube los tres archivos para comenzar: Entradas, Salidas y Obras.")

import pandas as pd

df_obras = pd.read_excel('/content/drive/MyDrive/PROYECTO PCMEJIA/OBRAS/OBRAS_2025.xlsx')
print(df_obras.columns)

from pyngrok import ngrok
import time
import threading
import os

# Detener cualquier sesi√≥n anterior de ngrok
ngrok.kill()

# Funci√≥n para correr streamlit en segundo plano
def run_app():
    os.system("streamlit run app.py")

# Ejecutar streamlit en segundo plano
threading.Thread(target=run_app).start()

# Esperar unos segundos para que levante
time.sleep(5)

# Conectar Ngrok
public_url = ngrok.connect(8501)
print(f"üîó Accede a tu app en: {public_url}")